// Code generated by MockGen. DO NOT EDIT.
// Source: saving.pb.go

// Package protobuf is a generated GoMock package.
package protobuf

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockSavingsServiceClient is a mock of SavingsServiceClient interface.
type MockSavingsServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockSavingsServiceClientMockRecorder
}

// MockSavingsServiceClientMockRecorder is the mock recorder for MockSavingsServiceClient.
type MockSavingsServiceClientMockRecorder struct {
	mock *MockSavingsServiceClient
}

// NewMockSavingsServiceClient creates a new mock instance.
func NewMockSavingsServiceClient(ctrl *gomock.Controller) *MockSavingsServiceClient {
	mock := &MockSavingsServiceClient{ctrl: ctrl}
	mock.recorder = &MockSavingsServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSavingsServiceClient) EXPECT() *MockSavingsServiceClientMockRecorder {
	return m.recorder
}

// AccountInquiry mocks base method.
func (m *MockSavingsServiceClient) AccountInquiry(ctx context.Context, in *AccountInquiryRequest, opts ...grpc.CallOption) (*SavingAccount, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AccountInquiry", varargs...)
	ret0, _ := ret[0].(*SavingAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountInquiry indicates an expected call of AccountInquiry.
func (mr *MockSavingsServiceClientMockRecorder) AccountInquiry(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountInquiry", reflect.TypeOf((*MockSavingsServiceClient)(nil).AccountInquiry), varargs...)
}

// OpenSavingsAccount mocks base method.
func (m *MockSavingsServiceClient) OpenSavingsAccount(ctx context.Context, in *SavingAccount, opts ...grpc.CallOption) (*SavingAccount, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OpenSavingsAccount", varargs...)
	ret0, _ := ret[0].(*SavingAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenSavingsAccount indicates an expected call of OpenSavingsAccount.
func (mr *MockSavingsServiceClientMockRecorder) OpenSavingsAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenSavingsAccount", reflect.TypeOf((*MockSavingsServiceClient)(nil).OpenSavingsAccount), varargs...)
}

// SearchAccountByID mocks base method.
func (m *MockSavingsServiceClient) SearchAccountByID(ctx context.Context, in *AccID, opts ...grpc.CallOption) (*SavingAccount, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchAccountByID", varargs...)
	ret0, _ := ret[0].(*SavingAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchAccountByID indicates an expected call of SearchAccountByID.
func (mr *MockSavingsServiceClientMockRecorder) SearchAccountByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAccountByID", reflect.TypeOf((*MockSavingsServiceClient)(nil).SearchAccountByID), varargs...)
}

// SearchAccountsByFilter mocks base method.
func (m *MockSavingsServiceClient) SearchAccountsByFilter(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*SavingAccountList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchAccountsByFilter", varargs...)
	ret0, _ := ret[0].(*SavingAccountList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchAccountsByFilter indicates an expected call of SearchAccountsByFilter.
func (mr *MockSavingsServiceClientMockRecorder) SearchAccountsByFilter(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAccountsByFilter", reflect.TypeOf((*MockSavingsServiceClient)(nil).SearchAccountsByFilter), varargs...)
}

// SearchAccountsByUserID mocks base method.
func (m *MockSavingsServiceClient) SearchAccountsByUserID(ctx context.Context, in *AccountInquiryRequest, opts ...grpc.CallOption) (*SavingAccountList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SearchAccountsByUserID", varargs...)
	ret0, _ := ret[0].(*SavingAccountList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchAccountsByUserID indicates an expected call of SearchAccountsByUserID.
func (mr *MockSavingsServiceClientMockRecorder) SearchAccountsByUserID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAccountsByUserID", reflect.TypeOf((*MockSavingsServiceClient)(nil).SearchAccountsByUserID), varargs...)
}

// UpdateBalance mocks base method.
func (m *MockSavingsServiceClient) UpdateBalance(ctx context.Context, in *WithdrawalRequest, opts ...grpc.CallOption) (*SavingAccount, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBalance", varargs...)
	ret0, _ := ret[0].(*SavingAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBalance indicates an expected call of UpdateBalance.
func (mr *MockSavingsServiceClientMockRecorder) UpdateBalance(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalance", reflect.TypeOf((*MockSavingsServiceClient)(nil).UpdateBalance), varargs...)
}

// MockSavingsServiceServer is a mock of SavingsServiceServer interface.
type MockSavingsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockSavingsServiceServerMockRecorder
}

// MockSavingsServiceServerMockRecorder is the mock recorder for MockSavingsServiceServer.
type MockSavingsServiceServerMockRecorder struct {
	mock *MockSavingsServiceServer
}

// NewMockSavingsServiceServer creates a new mock instance.
func NewMockSavingsServiceServer(ctrl *gomock.Controller) *MockSavingsServiceServer {
	mock := &MockSavingsServiceServer{ctrl: ctrl}
	mock.recorder = &MockSavingsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSavingsServiceServer) EXPECT() *MockSavingsServiceServerMockRecorder {
	return m.recorder
}

// AccountInquiry mocks base method.
func (m *MockSavingsServiceServer) AccountInquiry(arg0 context.Context, arg1 *AccountInquiryRequest) (*SavingAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountInquiry", arg0, arg1)
	ret0, _ := ret[0].(*SavingAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountInquiry indicates an expected call of AccountInquiry.
func (mr *MockSavingsServiceServerMockRecorder) AccountInquiry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountInquiry", reflect.TypeOf((*MockSavingsServiceServer)(nil).AccountInquiry), arg0, arg1)
}

// OpenSavingsAccount mocks base method.
func (m *MockSavingsServiceServer) OpenSavingsAccount(arg0 context.Context, arg1 *SavingAccount) (*SavingAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenSavingsAccount", arg0, arg1)
	ret0, _ := ret[0].(*SavingAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenSavingsAccount indicates an expected call of OpenSavingsAccount.
func (mr *MockSavingsServiceServerMockRecorder) OpenSavingsAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenSavingsAccount", reflect.TypeOf((*MockSavingsServiceServer)(nil).OpenSavingsAccount), arg0, arg1)
}

// SearchAccountByID mocks base method.
func (m *MockSavingsServiceServer) SearchAccountByID(arg0 context.Context, arg1 *AccID) (*SavingAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchAccountByID", arg0, arg1)
	ret0, _ := ret[0].(*SavingAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchAccountByID indicates an expected call of SearchAccountByID.
func (mr *MockSavingsServiceServerMockRecorder) SearchAccountByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAccountByID", reflect.TypeOf((*MockSavingsServiceServer)(nil).SearchAccountByID), arg0, arg1)
}

// SearchAccountsByFilter mocks base method.
func (m *MockSavingsServiceServer) SearchAccountsByFilter(arg0 context.Context, arg1 *Filter) (*SavingAccountList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchAccountsByFilter", arg0, arg1)
	ret0, _ := ret[0].(*SavingAccountList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchAccountsByFilter indicates an expected call of SearchAccountsByFilter.
func (mr *MockSavingsServiceServerMockRecorder) SearchAccountsByFilter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAccountsByFilter", reflect.TypeOf((*MockSavingsServiceServer)(nil).SearchAccountsByFilter), arg0, arg1)
}

// SearchAccountsByUserID mocks base method.
func (m *MockSavingsServiceServer) SearchAccountsByUserID(arg0 context.Context, arg1 *AccountInquiryRequest) (*SavingAccountList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchAccountsByUserID", arg0, arg1)
	ret0, _ := ret[0].(*SavingAccountList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchAccountsByUserID indicates an expected call of SearchAccountsByUserID.
func (mr *MockSavingsServiceServerMockRecorder) SearchAccountsByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAccountsByUserID", reflect.TypeOf((*MockSavingsServiceServer)(nil).SearchAccountsByUserID), arg0, arg1)
}

// UpdateBalance mocks base method.
func (m *MockSavingsServiceServer) UpdateBalance(arg0 context.Context, arg1 *WithdrawalRequest) (*SavingAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalance", arg0, arg1)
	ret0, _ := ret[0].(*SavingAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBalance indicates an expected call of UpdateBalance.
func (mr *MockSavingsServiceServerMockRecorder) UpdateBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalance", reflect.TypeOf((*MockSavingsServiceServer)(nil).UpdateBalance), arg0, arg1)
}
