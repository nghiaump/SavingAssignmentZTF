// Code generated by MockGen. DO NOT EDIT.
// Source: mid_saving.pb.go

// Package protobuf is a generated GoMock package.
package protobuf

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockMidSavingServiceClient is a mock of MidSavingServiceClient interface.
type MockMidSavingServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockMidSavingServiceClientMockRecorder
}

// MockMidSavingServiceClientMockRecorder is the mock recorder for MockMidSavingServiceClient.
type MockMidSavingServiceClientMockRecorder struct {
	mock *MockMidSavingServiceClient
}

// NewMockMidSavingServiceClient creates a new mock instance.
func NewMockMidSavingServiceClient(ctrl *gomock.Controller) *MockMidSavingServiceClient {
	mock := &MockMidSavingServiceClient{ctrl: ctrl}
	mock.recorder = &MockMidSavingServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMidSavingServiceClient) EXPECT() *MockMidSavingServiceClientMockRecorder {
	return m.recorder
}

// AccountInquiry mocks base method.
func (m *MockMidSavingServiceClient) AccountInquiry(ctx context.Context, in *AccountInquiryRequest, opts ...grpc.CallOption) (*SavingAccount, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AccountInquiry", varargs...)
	ret0, _ := ret[0].(*SavingAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountInquiry indicates an expected call of AccountInquiry.
func (mr *MockMidSavingServiceClientMockRecorder) AccountInquiry(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountInquiry", reflect.TypeOf((*MockMidSavingServiceClient)(nil).AccountInquiry), varargs...)
}

// GetCurrentKYC mocks base method.
func (m *MockMidSavingServiceClient) GetCurrentKYC(ctx context.Context, in *GetCurrentKYCRequest, opts ...grpc.CallOption) (*GetCurrentKYCResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCurrentKYC", varargs...)
	ret0, _ := ret[0].(*GetCurrentKYCResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentKYC indicates an expected call of GetCurrentKYC.
func (mr *MockMidSavingServiceClientMockRecorder) GetCurrentKYC(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentKYC", reflect.TypeOf((*MockMidSavingServiceClient)(nil).GetCurrentKYC), varargs...)
}

// OpenSavingsAccount mocks base method.
func (m *MockMidSavingServiceClient) OpenSavingsAccount(ctx context.Context, in *OpenSavingsAccountRequest, opts ...grpc.CallOption) (*OpenSavingsAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OpenSavingsAccount", varargs...)
	ret0, _ := ret[0].(*OpenSavingsAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenSavingsAccount indicates an expected call of OpenSavingsAccount.
func (mr *MockMidSavingServiceClientMockRecorder) OpenSavingsAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenSavingsAccount", reflect.TypeOf((*MockMidSavingServiceClient)(nil).OpenSavingsAccount), varargs...)
}

// RegisterUser mocks base method.
func (m *MockMidSavingServiceClient) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterUser", varargs...)
	ret0, _ := ret[0].(*RegisterUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockMidSavingServiceClientMockRecorder) RegisterUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockMidSavingServiceClient)(nil).RegisterUser), varargs...)
}

// Withdrawal mocks base method.
func (m *MockMidSavingServiceClient) Withdrawal(ctx context.Context, in *WithdrawalRequest, opts ...grpc.CallOption) (*WithdrawalResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Withdrawal", varargs...)
	ret0, _ := ret[0].(*WithdrawalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Withdrawal indicates an expected call of Withdrawal.
func (mr *MockMidSavingServiceClientMockRecorder) Withdrawal(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdrawal", reflect.TypeOf((*MockMidSavingServiceClient)(nil).Withdrawal), varargs...)
}

// MockMidSavingServiceServer is a mock of MidSavingServiceServer interface.
type MockMidSavingServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockMidSavingServiceServerMockRecorder
}

// MockMidSavingServiceServerMockRecorder is the mock recorder for MockMidSavingServiceServer.
type MockMidSavingServiceServerMockRecorder struct {
	mock *MockMidSavingServiceServer
}

// NewMockMidSavingServiceServer creates a new mock instance.
func NewMockMidSavingServiceServer(ctrl *gomock.Controller) *MockMidSavingServiceServer {
	mock := &MockMidSavingServiceServer{ctrl: ctrl}
	mock.recorder = &MockMidSavingServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMidSavingServiceServer) EXPECT() *MockMidSavingServiceServerMockRecorder {
	return m.recorder
}

// AccountInquiry mocks base method.
func (m *MockMidSavingServiceServer) AccountInquiry(arg0 context.Context, arg1 *AccountInquiryRequest) (*SavingAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountInquiry", arg0, arg1)
	ret0, _ := ret[0].(*SavingAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountInquiry indicates an expected call of AccountInquiry.
func (mr *MockMidSavingServiceServerMockRecorder) AccountInquiry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountInquiry", reflect.TypeOf((*MockMidSavingServiceServer)(nil).AccountInquiry), arg0, arg1)
}

// GetCurrentKYC mocks base method.
func (m *MockMidSavingServiceServer) GetCurrentKYC(arg0 context.Context, arg1 *GetCurrentKYCRequest) (*GetCurrentKYCResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentKYC", arg0, arg1)
	ret0, _ := ret[0].(*GetCurrentKYCResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentKYC indicates an expected call of GetCurrentKYC.
func (mr *MockMidSavingServiceServerMockRecorder) GetCurrentKYC(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentKYC", reflect.TypeOf((*MockMidSavingServiceServer)(nil).GetCurrentKYC), arg0, arg1)
}

// OpenSavingsAccount mocks base method.
func (m *MockMidSavingServiceServer) OpenSavingsAccount(arg0 context.Context, arg1 *OpenSavingsAccountRequest) (*OpenSavingsAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenSavingsAccount", arg0, arg1)
	ret0, _ := ret[0].(*OpenSavingsAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenSavingsAccount indicates an expected call of OpenSavingsAccount.
func (mr *MockMidSavingServiceServerMockRecorder) OpenSavingsAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenSavingsAccount", reflect.TypeOf((*MockMidSavingServiceServer)(nil).OpenSavingsAccount), arg0, arg1)
}

// RegisterUser mocks base method.
func (m *MockMidSavingServiceServer) RegisterUser(arg0 context.Context, arg1 *RegisterUserRequest) (*RegisterUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", arg0, arg1)
	ret0, _ := ret[0].(*RegisterUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockMidSavingServiceServerMockRecorder) RegisterUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockMidSavingServiceServer)(nil).RegisterUser), arg0, arg1)
}

// Withdrawal mocks base method.
func (m *MockMidSavingServiceServer) Withdrawal(arg0 context.Context, arg1 *WithdrawalRequest) (*WithdrawalResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdrawal", arg0, arg1)
	ret0, _ := ret[0].(*WithdrawalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Withdrawal indicates an expected call of Withdrawal.
func (mr *MockMidSavingServiceServerMockRecorder) Withdrawal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdrawal", reflect.TypeOf((*MockMidSavingServiceServer)(nil).Withdrawal), arg0, arg1)
}
