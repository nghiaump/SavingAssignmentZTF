// Code generated by MockGen. DO NOT EDIT.
// Source: mid_saving.pb.go

// Package protobuf is a generated GoMock package.
package protobuf

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockMidSavingServiceClient is a mock of MidSavingServiceClient interface.
type MockMidSavingServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockMidSavingServiceClientMockRecorder
}

// MockMidSavingServiceClientMockRecorder is the mock recorder for MockMidSavingServiceClient.
type MockMidSavingServiceClientMockRecorder struct {
	mock *MockMidSavingServiceClient
}

// NewMockMidSavingServiceClient creates a new mock instance.
func NewMockMidSavingServiceClient(ctrl *gomock.Controller) *MockMidSavingServiceClient {
	mock := &MockMidSavingServiceClient{ctrl: ctrl}
	mock.recorder = &MockMidSavingServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMidSavingServiceClient) EXPECT() *MockMidSavingServiceClientMockRecorder {
	return m.recorder
}

// CreateSavingsAccount mocks base method.
func (m *MockMidSavingServiceClient) CreateSavingsAccount(ctx context.Context, in *OpenSavingsAccountRequest, opts ...grpc.CallOption) (*OpenSavingsAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSavingsAccount", varargs...)
	ret0, _ := ret[0].(*OpenSavingsAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSavingsAccount indicates an expected call of CreateSavingsAccount.
func (mr *MockMidSavingServiceClientMockRecorder) CreateSavingsAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSavingsAccount", reflect.TypeOf((*MockMidSavingServiceClient)(nil).CreateSavingsAccount), varargs...)
}

// CreateUser mocks base method.
func (m *MockMidSavingServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateUser", varargs...)
	ret0, _ := ret[0].(*CreateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockMidSavingServiceClientMockRecorder) CreateUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockMidSavingServiceClient)(nil).CreateUser), varargs...)
}

// DeleteAccount mocks base method.
func (m *MockMidSavingServiceClient) DeleteAccount(ctx context.Context, in *SavingAccount, opts ...grpc.CallOption) (*DeleteAccountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAccount", varargs...)
	ret0, _ := ret[0].(*DeleteAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccount indicates an expected call of DeleteAccount.
func (mr *MockMidSavingServiceClientMockRecorder) DeleteAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockMidSavingServiceClient)(nil).DeleteAccount), varargs...)
}

// DeleteUser mocks base method.
func (m *MockMidSavingServiceClient) DeleteUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUser", varargs...)
	ret0, _ := ret[0].(*DeleteUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockMidSavingServiceClientMockRecorder) DeleteUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockMidSavingServiceClient)(nil).DeleteUser), varargs...)
}

// GetAccount mocks base method.
func (m *MockMidSavingServiceClient) GetAccount(ctx context.Context, in *AccountInquiryRequest, opts ...grpc.CallOption) (*SavingAccount, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccount", varargs...)
	ret0, _ := ret[0].(*SavingAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockMidSavingServiceClientMockRecorder) GetAccount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockMidSavingServiceClient)(nil).GetAccount), varargs...)
}

// GetAccountByID mocks base method.
func (m *MockMidSavingServiceClient) GetAccountByID(ctx context.Context, in *AccID, opts ...grpc.CallOption) (*SavingAccount, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAccountByID", varargs...)
	ret0, _ := ret[0].(*SavingAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByID indicates an expected call of GetAccountByID.
func (mr *MockMidSavingServiceClientMockRecorder) GetAccountByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByID", reflect.TypeOf((*MockMidSavingServiceClient)(nil).GetAccountByID), varargs...)
}

// GetCurrentKYC mocks base method.
func (m *MockMidSavingServiceClient) GetCurrentKYC(ctx context.Context, in *GetCurrentKYCRequest, opts ...grpc.CallOption) (*GetCurrentKYCResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCurrentKYC", varargs...)
	ret0, _ := ret[0].(*GetCurrentKYCResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentKYC indicates an expected call of GetCurrentKYC.
func (mr *MockMidSavingServiceClientMockRecorder) GetCurrentKYC(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentKYC", reflect.TypeOf((*MockMidSavingServiceClient)(nil).GetCurrentKYC), varargs...)
}

// GetJWT mocks base method.
func (m *MockMidSavingServiceClient) GetJWT(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*JWT, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetJWT", varargs...)
	ret0, _ := ret[0].(*JWT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJWT indicates an expected call of GetJWT.
func (mr *MockMidSavingServiceClientMockRecorder) GetJWT(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJWT", reflect.TypeOf((*MockMidSavingServiceClient)(nil).GetJWT), varargs...)
}

// GetUserByAccountID mocks base method.
func (m *MockMidSavingServiceClient) GetUserByAccountID(ctx context.Context, in *AccountID, opts ...grpc.CallOption) (*User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserByAccountID", varargs...)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByAccountID indicates an expected call of GetUserByAccountID.
func (mr *MockMidSavingServiceClientMockRecorder) GetUserByAccountID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByAccountID", reflect.TypeOf((*MockMidSavingServiceClient)(nil).GetUserByAccountID), varargs...)
}

// GetUserByID mocks base method.
func (m *MockMidSavingServiceClient) GetUserByID(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserByID", varargs...)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockMidSavingServiceClientMockRecorder) GetUserByID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockMidSavingServiceClient)(nil).GetUserByID), varargs...)
}

// GetUserByIdCardNumber mocks base method.
func (m *MockMidSavingServiceClient) GetUserByIdCardNumber(ctx context.Context, in *IDCardNumber, opts ...grpc.CallOption) (*User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserByIdCardNumber", varargs...)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByIdCardNumber indicates an expected call of GetUserByIdCardNumber.
func (mr *MockMidSavingServiceClientMockRecorder) GetUserByIdCardNumber(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByIdCardNumber", reflect.TypeOf((*MockMidSavingServiceClient)(nil).GetUserByIdCardNumber), varargs...)
}

// ListAccountsByFilter mocks base method.
func (m *MockMidSavingServiceClient) ListAccountsByFilter(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*SavingAccountList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccountsByFilter", varargs...)
	ret0, _ := ret[0].(*SavingAccountList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountsByFilter indicates an expected call of ListAccountsByFilter.
func (mr *MockMidSavingServiceClientMockRecorder) ListAccountsByFilter(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountsByFilter", reflect.TypeOf((*MockMidSavingServiceClient)(nil).ListAccountsByFilter), varargs...)
}

// ListAccountsByIDCardNumber mocks base method.
func (m *MockMidSavingServiceClient) ListAccountsByIDCardNumber(ctx context.Context, in *IDCardNumber, opts ...grpc.CallOption) (*SavingAccountList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccountsByIDCardNumber", varargs...)
	ret0, _ := ret[0].(*SavingAccountList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountsByIDCardNumber indicates an expected call of ListAccountsByIDCardNumber.
func (mr *MockMidSavingServiceClientMockRecorder) ListAccountsByIDCardNumber(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountsByIDCardNumber", reflect.TypeOf((*MockMidSavingServiceClient)(nil).ListAccountsByIDCardNumber), varargs...)
}

// ListAccountsByUserID mocks base method.
func (m *MockMidSavingServiceClient) ListAccountsByUserID(ctx context.Context, in *AccountInquiryRequest, opts ...grpc.CallOption) (*SavingAccountList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAccountsByUserID", varargs...)
	ret0, _ := ret[0].(*SavingAccountList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountsByUserID indicates an expected call of ListAccountsByUserID.
func (mr *MockMidSavingServiceClientMockRecorder) ListAccountsByUserID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountsByUserID", reflect.TypeOf((*MockMidSavingServiceClient)(nil).ListAccountsByUserID), varargs...)
}

// ListUserByNumberAccountRange mocks base method.
func (m *MockMidSavingServiceClient) ListUserByNumberAccountRange(ctx context.Context, in *NumberAccountRange, opts ...grpc.CallOption) (*ListUserWithAccounts, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUserByNumberAccountRange", varargs...)
	ret0, _ := ret[0].(*ListUserWithAccounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserByNumberAccountRange indicates an expected call of ListUserByNumberAccountRange.
func (mr *MockMidSavingServiceClientMockRecorder) ListUserByNumberAccountRange(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserByNumberAccountRange", reflect.TypeOf((*MockMidSavingServiceClient)(nil).ListUserByNumberAccountRange), varargs...)
}

// ListUsersByFilter mocks base method.
func (m *MockMidSavingServiceClient) ListUsersByFilter(ctx context.Context, in *UserFilter, opts ...grpc.CallOption) (*UserList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUsersByFilter", varargs...)
	ret0, _ := ret[0].(*UserList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsersByFilter indicates an expected call of ListUsersByFilter.
func (mr *MockMidSavingServiceClientMockRecorder) ListUsersByFilter(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersByFilter", reflect.TypeOf((*MockMidSavingServiceClient)(nil).ListUsersByFilter), varargs...)
}

// UpdateAccountByWithdrawal mocks base method.
func (m *MockMidSavingServiceClient) UpdateAccountByWithdrawal(ctx context.Context, in *WithdrawalRequest, opts ...grpc.CallOption) (*WithdrawalResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAccountByWithdrawal", varargs...)
	ret0, _ := ret[0].(*WithdrawalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccountByWithdrawal indicates an expected call of UpdateAccountByWithdrawal.
func (mr *MockMidSavingServiceClientMockRecorder) UpdateAccountByWithdrawal(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountByWithdrawal", reflect.TypeOf((*MockMidSavingServiceClient)(nil).UpdateAccountByWithdrawal), varargs...)
}

// UpdateUser mocks base method.
func (m *MockMidSavingServiceClient) UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUser", varargs...)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockMidSavingServiceClientMockRecorder) UpdateUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockMidSavingServiceClient)(nil).UpdateUser), varargs...)
}

// MockMidSavingServiceServer is a mock of MidSavingServiceServer interface.
type MockMidSavingServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockMidSavingServiceServerMockRecorder
}

// MockMidSavingServiceServerMockRecorder is the mock recorder for MockMidSavingServiceServer.
type MockMidSavingServiceServerMockRecorder struct {
	mock *MockMidSavingServiceServer
}

// NewMockMidSavingServiceServer creates a new mock instance.
func NewMockMidSavingServiceServer(ctrl *gomock.Controller) *MockMidSavingServiceServer {
	mock := &MockMidSavingServiceServer{ctrl: ctrl}
	mock.recorder = &MockMidSavingServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMidSavingServiceServer) EXPECT() *MockMidSavingServiceServerMockRecorder {
	return m.recorder
}

// CreateSavingsAccount mocks base method.
func (m *MockMidSavingServiceServer) CreateSavingsAccount(arg0 context.Context, arg1 *OpenSavingsAccountRequest) (*OpenSavingsAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSavingsAccount", arg0, arg1)
	ret0, _ := ret[0].(*OpenSavingsAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSavingsAccount indicates an expected call of CreateSavingsAccount.
func (mr *MockMidSavingServiceServerMockRecorder) CreateSavingsAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSavingsAccount", reflect.TypeOf((*MockMidSavingServiceServer)(nil).CreateSavingsAccount), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockMidSavingServiceServer) CreateUser(arg0 context.Context, arg1 *CreateUserRequest) (*CreateUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(*CreateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockMidSavingServiceServerMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockMidSavingServiceServer)(nil).CreateUser), arg0, arg1)
}

// DeleteAccount mocks base method.
func (m *MockMidSavingServiceServer) DeleteAccount(arg0 context.Context, arg1 *SavingAccount) (*DeleteAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccount", arg0, arg1)
	ret0, _ := ret[0].(*DeleteAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAccount indicates an expected call of DeleteAccount.
func (mr *MockMidSavingServiceServerMockRecorder) DeleteAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockMidSavingServiceServer)(nil).DeleteAccount), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockMidSavingServiceServer) DeleteUser(arg0 context.Context, arg1 *User) (*DeleteUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(*DeleteUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockMidSavingServiceServerMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockMidSavingServiceServer)(nil).DeleteUser), arg0, arg1)
}

// GetAccount mocks base method.
func (m *MockMidSavingServiceServer) GetAccount(arg0 context.Context, arg1 *AccountInquiryRequest) (*SavingAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0, arg1)
	ret0, _ := ret[0].(*SavingAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockMidSavingServiceServerMockRecorder) GetAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockMidSavingServiceServer)(nil).GetAccount), arg0, arg1)
}

// GetAccountByID mocks base method.
func (m *MockMidSavingServiceServer) GetAccountByID(arg0 context.Context, arg1 *AccID) (*SavingAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByID", arg0, arg1)
	ret0, _ := ret[0].(*SavingAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByID indicates an expected call of GetAccountByID.
func (mr *MockMidSavingServiceServerMockRecorder) GetAccountByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByID", reflect.TypeOf((*MockMidSavingServiceServer)(nil).GetAccountByID), arg0, arg1)
}

// GetCurrentKYC mocks base method.
func (m *MockMidSavingServiceServer) GetCurrentKYC(arg0 context.Context, arg1 *GetCurrentKYCRequest) (*GetCurrentKYCResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentKYC", arg0, arg1)
	ret0, _ := ret[0].(*GetCurrentKYCResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentKYC indicates an expected call of GetCurrentKYC.
func (mr *MockMidSavingServiceServerMockRecorder) GetCurrentKYC(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentKYC", reflect.TypeOf((*MockMidSavingServiceServer)(nil).GetCurrentKYC), arg0, arg1)
}

// GetJWT mocks base method.
func (m *MockMidSavingServiceServer) GetJWT(arg0 context.Context, arg1 *LoginRequest) (*JWT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJWT", arg0, arg1)
	ret0, _ := ret[0].(*JWT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJWT indicates an expected call of GetJWT.
func (mr *MockMidSavingServiceServerMockRecorder) GetJWT(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJWT", reflect.TypeOf((*MockMidSavingServiceServer)(nil).GetJWT), arg0, arg1)
}

// GetUserByAccountID mocks base method.
func (m *MockMidSavingServiceServer) GetUserByAccountID(arg0 context.Context, arg1 *AccountID) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByAccountID", arg0, arg1)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByAccountID indicates an expected call of GetUserByAccountID.
func (mr *MockMidSavingServiceServerMockRecorder) GetUserByAccountID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByAccountID", reflect.TypeOf((*MockMidSavingServiceServer)(nil).GetUserByAccountID), arg0, arg1)
}

// GetUserByID mocks base method.
func (m *MockMidSavingServiceServer) GetUserByID(arg0 context.Context, arg1 *UserID) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", arg0, arg1)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockMidSavingServiceServerMockRecorder) GetUserByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockMidSavingServiceServer)(nil).GetUserByID), arg0, arg1)
}

// GetUserByIdCardNumber mocks base method.
func (m *MockMidSavingServiceServer) GetUserByIdCardNumber(arg0 context.Context, arg1 *IDCardNumber) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByIdCardNumber", arg0, arg1)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByIdCardNumber indicates an expected call of GetUserByIdCardNumber.
func (mr *MockMidSavingServiceServerMockRecorder) GetUserByIdCardNumber(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByIdCardNumber", reflect.TypeOf((*MockMidSavingServiceServer)(nil).GetUserByIdCardNumber), arg0, arg1)
}

// ListAccountsByFilter mocks base method.
func (m *MockMidSavingServiceServer) ListAccountsByFilter(arg0 context.Context, arg1 *Filter) (*SavingAccountList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountsByFilter", arg0, arg1)
	ret0, _ := ret[0].(*SavingAccountList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountsByFilter indicates an expected call of ListAccountsByFilter.
func (mr *MockMidSavingServiceServerMockRecorder) ListAccountsByFilter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountsByFilter", reflect.TypeOf((*MockMidSavingServiceServer)(nil).ListAccountsByFilter), arg0, arg1)
}

// ListAccountsByIDCardNumber mocks base method.
func (m *MockMidSavingServiceServer) ListAccountsByIDCardNumber(arg0 context.Context, arg1 *IDCardNumber) (*SavingAccountList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountsByIDCardNumber", arg0, arg1)
	ret0, _ := ret[0].(*SavingAccountList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountsByIDCardNumber indicates an expected call of ListAccountsByIDCardNumber.
func (mr *MockMidSavingServiceServerMockRecorder) ListAccountsByIDCardNumber(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountsByIDCardNumber", reflect.TypeOf((*MockMidSavingServiceServer)(nil).ListAccountsByIDCardNumber), arg0, arg1)
}

// ListAccountsByUserID mocks base method.
func (m *MockMidSavingServiceServer) ListAccountsByUserID(arg0 context.Context, arg1 *AccountInquiryRequest) (*SavingAccountList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccountsByUserID", arg0, arg1)
	ret0, _ := ret[0].(*SavingAccountList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccountsByUserID indicates an expected call of ListAccountsByUserID.
func (mr *MockMidSavingServiceServerMockRecorder) ListAccountsByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccountsByUserID", reflect.TypeOf((*MockMidSavingServiceServer)(nil).ListAccountsByUserID), arg0, arg1)
}

// ListUserByNumberAccountRange mocks base method.
func (m *MockMidSavingServiceServer) ListUserByNumberAccountRange(arg0 context.Context, arg1 *NumberAccountRange) (*ListUserWithAccounts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserByNumberAccountRange", arg0, arg1)
	ret0, _ := ret[0].(*ListUserWithAccounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserByNumberAccountRange indicates an expected call of ListUserByNumberAccountRange.
func (mr *MockMidSavingServiceServerMockRecorder) ListUserByNumberAccountRange(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserByNumberAccountRange", reflect.TypeOf((*MockMidSavingServiceServer)(nil).ListUserByNumberAccountRange), arg0, arg1)
}

// ListUsersByFilter mocks base method.
func (m *MockMidSavingServiceServer) ListUsersByFilter(arg0 context.Context, arg1 *UserFilter) (*UserList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsersByFilter", arg0, arg1)
	ret0, _ := ret[0].(*UserList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsersByFilter indicates an expected call of ListUsersByFilter.
func (mr *MockMidSavingServiceServerMockRecorder) ListUsersByFilter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsersByFilter", reflect.TypeOf((*MockMidSavingServiceServer)(nil).ListUsersByFilter), arg0, arg1)
}

// UpdateAccountByWithdrawal mocks base method.
func (m *MockMidSavingServiceServer) UpdateAccountByWithdrawal(arg0 context.Context, arg1 *WithdrawalRequest) (*WithdrawalResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountByWithdrawal", arg0, arg1)
	ret0, _ := ret[0].(*WithdrawalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccountByWithdrawal indicates an expected call of UpdateAccountByWithdrawal.
func (mr *MockMidSavingServiceServerMockRecorder) UpdateAccountByWithdrawal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountByWithdrawal", reflect.TypeOf((*MockMidSavingServiceServer)(nil).UpdateAccountByWithdrawal), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockMidSavingServiceServer) UpdateUser(arg0 context.Context, arg1 *User) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockMidSavingServiceServerMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockMidSavingServiceServer)(nil).UpdateUser), arg0, arg1)
}
